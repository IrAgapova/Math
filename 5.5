{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "029abfd0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.309616621868999e+30\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "n=100\n",
    "r=0.7\n",
    "x=np.random.rand(n)\n",
    "y=r*x +(1-r)*np.random.rand(n)\n",
    "plt.plot(x, y, \"o\")\n",
    "plt.xlabel(\"x\")\n",
    "plt.ylabel(\"y\")\n",
    "plt.grid(True)\n",
    "a = 0\n",
    "for i in range n:\n",
    "    a = (x-(np.sum(x)/n)*(y-(np.sum(y)/n)\n",
    "    a += a                    \n",
    "kor_r = (np.sum(x-(np.sum(x)/n)*(y-(np.sum(y)/n))))/(((np.sum(x-(np.sum(x)/n))**2)*np.sum(y-(np.sum(y)/n))**2)**0.5)\n",
    "print(kor_r)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9abf8ff9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
