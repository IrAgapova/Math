{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "65c48d11",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'y')"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import math\n",
    "x = []\n",
    "y = []\n",
    "y2 =[]\n",
    "a = -1\n",
    "b = -2\n",
    "for i in range(-10000,10000):\n",
    "    x1 = i/10000\n",
    "    x.append(x1)\n",
    "    y.append(math.sqrt(b**2*(1-x1**2/a**2)))\n",
    "    y2.append(-math.sqrt(b**2*(1-x1**2/a**2)))\n",
    "plt.plot(x,y2)\n",
    "plt.plot(x,y)\n",
    "plt.xlabel(\"x\")\n",
    "plt.ylabel(\"y\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b5ad67b6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
